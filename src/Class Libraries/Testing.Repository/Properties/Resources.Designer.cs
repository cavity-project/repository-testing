//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Cavity.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Cavity.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}(...) should return a record with the correct {1}..
        /// </summary>
        internal static string Repository_ExpectCorrectRecordValue_ExceptionMessage {
            get {
                return ResourceManager.GetString("Repository_ExpectCorrectRecordValue_ExceptionMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}(...) should return the correct {1}..
        /// </summary>
        internal static string Repository_ExpectCorrectValue_ExceptionMessage {
            get {
                return ResourceManager.GetString("Repository_ExpectCorrectValue_ExceptionMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}(...) should throw a RepositoryException when the record does not specify {1}..
        /// </summary>
        internal static string Repository_ExpectExceptionWhenRecordIncomplete_ExceptionMessage {
            get {
                return ResourceManager.GetString("Repository_ExpectExceptionWhenRecordIncomplete_ExceptionMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}(...) should throw a RepositoryException when a record with the key does not exist..
        /// </summary>
        internal static string Repository_ExpectExceptionWhenRecordKeyNotFound_UnitTestExceptionMessage {
            get {
                return ResourceManager.GetString("Repository_ExpectExceptionWhenRecordKeyNotFound_UnitTestExceptionMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}(...) should throw an ArgumentNullException when a record is not specified..
        /// </summary>
        internal static string Repository_ExpectExceptionWhenRecordNull_ExceptionMessage {
            get {
                return ResourceManager.GetString("Repository_ExpectExceptionWhenRecordNull_ExceptionMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}(...) should throw an ArgumentNullException when a URN is not specified..
        /// </summary>
        internal static string Repository_ExpectExceptionWhenUrnNull_ExceptionMessage {
            get {
                return ResourceManager.GetString("Repository_ExpectExceptionWhenUrnNull_ExceptionMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}(...) should return null when the {1} is not found..
        /// </summary>
        internal static string Repository_ExpectNullWhenRecordNotFound_ExceptionMessage {
            get {
                return ResourceManager.GetString("Repository_ExpectNullWhenRecordNotFound_ExceptionMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}(...) should return a {1}..
        /// </summary>
        internal static string Repository_ExpectResult_ExceptionMessage {
            get {
                return ResourceManager.GetString("Repository_ExpectResult_ExceptionMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}(...) should return true when an existing record is {1}..
        /// </summary>
        internal static string Repository_ExpectTrueWhenExistingRecord_ExceptionMessage {
            get {
                return ResourceManager.GetString("Repository_ExpectTrueWhenExistingRecord_ExceptionMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}(...) should return {1} when the record does not exist..
        /// </summary>
        internal static string Repository_ExpectWhenDoesNotExist_ExceptionMessage {
            get {
                return ResourceManager.GetString("Repository_ExpectWhenDoesNotExist_ExceptionMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}(...) should return {1} when the record exists..
        /// </summary>
        internal static string Repository_ExpectWhenExists_ExceptionMessage {
            get {
                return ResourceManager.GetString("Repository_ExpectWhenExists_ExceptionMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Insert(...) should throw a RepositoryException when a record with the key already exists..
        /// </summary>
        internal static string Repository_Insert_RecordKeyExists_ExceptionMessage {
            get {
                return ResourceManager.GetString("Repository_Insert_RecordKeyExists_ExceptionMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Insert(...) should throw a RepositoryException when a record with the URN already exists..
        /// </summary>
        internal static string Repository_Insert_RecordUrnExists_ExceptionMessage {
            get {
                return ResourceManager.GetString("Repository_Insert_RecordUrnExists_ExceptionMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Insert(...) should set the key of the returned record..
        /// </summary>
        internal static string Repository_Insert_ReturnsIncorrectKey_ExceptionMessage {
            get {
                return ResourceManager.GetString("Repository_Insert_ReturnsIncorrectKey_ExceptionMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Insert(...) should set the created date of the returned record..
        /// </summary>
        internal static string Repository_Insert_ReturnsWithoutCreated_ExceptionMessage {
            get {
                return ResourceManager.GetString("Repository_Insert_ReturnsWithoutCreated_ExceptionMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Insert(...) should set the modified date of the returned record..
        /// </summary>
        internal static string Repository_Insert_ReturnsWithoutModified_ExceptionMessage {
            get {
                return ResourceManager.GetString("Repository_Insert_ReturnsWithoutModified_ExceptionMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Match(...) should return true when a matching record exists..
        /// </summary>
        internal static string Repository_Match_ReturnsFalse_ExceptionMessage {
            get {
                return ResourceManager.GetString("Repository_Match_ReturnsFalse_ExceptionMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Match(...) should return false when no matching record exists..
        /// </summary>
        internal static string Repository_Match_ReturnsTrue_ExceptionMessage {
            get {
                return ResourceManager.GetString("Repository_Match_ReturnsTrue_ExceptionMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ModifiedSince(...) should return true when the record has been modified since the specified date..
        /// </summary>
        internal static string Repository_ModifiedSince_ReturnsFalse_ExceptionMessage {
            get {
                return ResourceManager.GetString("Repository_ModifiedSince_ReturnsFalse_ExceptionMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ModifiedSince(...) should return false when the record has not been modified since the specified date..
        /// </summary>
        internal static string Repository_ModifiedSince_ReturnsTrue_ExceptionMessage {
            get {
                return ResourceManager.GetString("Repository_ModifiedSince_ReturnsTrue_ExceptionMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Query(...) returned an empty set when records were expected..
        /// </summary>
        internal static string Repository_QueryReturnsEmpty_ExceptionMessage {
            get {
                return ResourceManager.GetString("Repository_QueryReturnsEmpty_ExceptionMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Query(...) should return an empty set rather than a null set..
        /// </summary>
        internal static string Repository_QueryReturnsNull_ExceptionMessage {
            get {
                return ResourceManager.GetString("Repository_QueryReturnsNull_ExceptionMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unexpected exception was encountered..
        /// </summary>
        internal static string Repository_UnexpectedException_ExceptionMessage {
            get {
                return ResourceManager.GetString("Repository_UnexpectedException_ExceptionMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Update(...) should throw a RepositoryException when a different record with the URN already exists..
        /// </summary>
        internal static string Repository_Update_RecordUrnExists_ExceptionMessage {
            get {
                return ResourceManager.GetString("Repository_Update_RecordUrnExists_ExceptionMessage", resourceCulture);
            }
        }
    }
}
